[
  {"keys": ["super+shift+g"], "command": "show_overlay", "args":
      {
          "overlay": "command_palette",
          "text":"git"
      }
  },
  { "keys": ["ctrl+space"], "command": "auto_complete" },
  { "keys": ["f3"], "command": "find_next" },
  { "keys": ["shift+f3"], "command": "find_prev" },
  { "keys": ["ctrl+;"], "command": "show_overlay", "args": {"overlay": "goto", "text": "#"} },

      // Swap bracket type
  { "keys": ["ctrl+shift+]"],
    "command": "swap_brackets"},

  // Swap quotes (only goes boths ways in supported languages...)
  { "keys": ["ctrl+shift+'"],
    "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"], "command": "bh_modules.swapquotes"} }},

  // Select text between brackets
  { "keys": ["ctrl+alt+a"],
    "command": "bh_key", "args": {"lines" : true, "plugin": {"type": ["__all__"], "command": "bh_modules.bracketselect"} } },

  // Select tag name of HTML/XML tag (both opening name and closing)
  { "keys": ["ctrl+alt+t"],
    "command": "bh_key", "args": {"plugin": {"type": ["cfml", "html", "angle"], "command": "bh_modules.tagnameselect"} } },

  // Toggle high visibility mode
  { "keys": ["alt+super+="],
    "command": "bh_toggle_high_visibility"},

  // REPL stuff
  { "keys": ["ctrl+alt+super+f12"],
    "command": "run_existing_window_command",
    "args": {
      "id": "repl_clojure",
      "file": "config/Clojure/Main.sublime-menu"
    }
  },

  // Get documentation
  { "keys": ["alt+super+d"],
    "command": "run_on_selection_in_repl",
    "args": {"function": "clojure.repl/doc"}
  },

  { "keys": ["shift+super+,", "b"],
    "command": "repl_transfer_current",
    "args": {"scope": "block", "action":"view_write"
    }
  },

  // Disable single quote auto-pairing in clojure
    {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'"
    },
    "context": [
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'${0:$SELECTION}'"
    },
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": false,
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  },
  {
    "keys": ["'"],
    "command": "noop",
    "context": [
      {
        "key": "setting.auto_match_enabled",
        "operator": "equal",
        "operand": true
      },
      {
        "key": "selection_empty",
        "operator": "equal",
        "operand": true,
        "match_all": true
      },
      {
        "key": "following_text",
        "operator": "regex_contains",
        "operand": "^'",
        "match_all": true
      },
      {
        "key": "selector",
        "operator": "equal",
        "operand": "source.clojure"
      }
    ]
  }
]

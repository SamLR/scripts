# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#

# alias junk
alias ls='ls -G'
alias l='ls -lha'
alias ..='cd ../'
alias canIP='curl canhazip.com'
alias caltoday="calendar -A 0 -f /usr/share/calendar/calendar.world | cut -f2"
alias genpassword="python -c \"import random; import string; print(''.join([random.choice(string.digits + string.ascii_letters) for i in range(12)]))\""

# pretty grep
alias grep="grep --colour=auto"

# Git aliases
alias ga='git add'
alias gs='git status'
alias gc='git commit -v' # add all changes (only already added files)
alias gco='git checkout'
alias gb='git branch'
alias gl='git log --pretty=format:"%h %s" -n 5'
alias gd='git diff'
alias gds='git diff --staged'
alias gt='git tag'
alias ggraph='git log --graph --oneline --decorate --all'
alias gpush='git push'
alias gamend='git commit -v --amend'
alias gfixup='git commit --fixup'
alias gfixlast='git commit --amend --no-edit'
alias girebase='git rebase -i --autosquash'
alias girebasem='git rebase -i --autosquash master'
alias gpull='git pull'
alias gll='git --no-pager log --oneline -n 5'
alias gcm='git checkout master || git checkout main'
alias gcb='git checkout -b'

# Vagrant aliases
alias vup='vagrant up'
alias vssh='vagrant ssh'
alias vpro='vagrant provision'
alias vdown='vagrant halt'
alias vlist='vagrant snapshot list'
alias vsave='vagrant snapshot save'
alias vdestroy='vagrant destroy'
alias vrestore='vagrant snapshot restore'
alias vstate='vagrant global-status'

# Sublime
alias subln='subl -n'
alias sublh='subl -n .'

# k8s
alias klogs='kubectl logs'
alias kdp='kubectl describe pod'
alias krmp='kubectl delete pod'
alias kgd='kubectl get deployments'
alias kgi='kubectl get ingress'
alias kgj='kubectl get jobs'
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgs='kubectl get svc'
alias kuc='kubectl config use-context'
alias kgetcontexts='kubectl config get-contexts'
alias ksetns='kubectl config set-context --current --namespace'

# python stuff, want to default to py3
alias python='python3'
alias pip='pip3'

function srcv(){
  source "${HOME}/venvs/${1}/bin/activate"
}
alias ipython='srcv ipython; ~/venvs/ipython/bin/ipython'
alias jupyter='srcv ipython; ~/venvs/ipython/bin/jupyter'

alias src-scratch='srcv ipython'

# Terraform stuff
alias tfplan='terraform plan'
alias tfinit='terraform init'
alias tfapply='terraform apply'
alias tfvalidate='terraform validate'
alias tfworkspace='terraform workspace select'
alias tflsworkspace='terraform workspace list'
alias tf14='tfenv use 0.14.5'
alias tf13='tfenv use 0.13.3'
alias tf12='tfenv use 0.12.24'
alias tfclean='rm -f .terraform/{environment,terraform.tfstate}'

function reminder() {
  echo -e "\n\033[31m\033[1m\t\t${@}\033[0m\n"
}

function update_repos(){
    for CODE_DIR in ~/code/* ; do
        if [ -d "${CODE_DIR}/.git" ]; then
            (
              echo "hello! ${CODE_DIR}"
              cd "${CODE_DIR}" || exit
              git stash save "update_repos save -- $(date)"
              git checkout master
              git pull
              echo -e "*****\n"
            )
        fi
    done
}

export TZ_I_CARE_ABOUT=(America/Chicago America/Sao_Paulo Europe/London Europe/Prague  Australia/Sydney)
function now(){
    for t in "${TZ_I_CARE_ABOUT[@]}"; do
        TZ=$t date +%F\ %H:%M\ %Z
    done
}

function tztime(){
    for t in "${TZ_I_CARE_ABOUT[@]}"; do
        TZ=$t gdate --date="TZ=\"Europe/London\" ${1}" +%F\ %H:%M\ %Z
    done
}

function b64d(){
  if [ -t 0 ]; then
    msg=$*
  else
    msg=$(cat)
  fi
  echo -n "${msg}" | base64 -D
}

function b64e(){
	if [ -t 0 ]; then
		msg=$*
	else
		msg=$(cat)
	fi
  echo -n "${msg}" | base64
}

function ec2(){
	query="Name=tag:Name,Values=*${1}*"
	aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length ) > 1 or (.Reservations[0].Instances | length ) > 1 then .Reservations[].Instances[] | {"ip":.PrivateIpAddress, "id":.InstanceId, "name": .Tags | map(select(.Key=="Name").Value)[0]} else .Reservations[0].Instances[0].PrivateIpAddress end' -cr
}

function ec2ip(){
  query="Name=private-ip-address,Values=${1}"
  aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length) > 0 then .Reservations[].Instances[]|{"name": .Tags | map(select(.Key=="Name").Value)[0], "id": .InstanceId, "type":.InstanceType, "image":.ImageId, "state": .State.Name} else "not found" end'
}

function ec2info(){
  query="Name=tag:Name,Values=*${1}*"
  aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length) > 0 then .Reservations[].Instances[]|{"name": .Tags | map(select(.Key=="Name").Value)[0], "id": .InstanceId, "type":.InstanceType, "image":.ImageId, "state": .State.Name} else "not found" end'
}

function route53(){
  src-scratch
  python ~/code/scratch/route53_hunter.py "${1}"
  deactivate
}


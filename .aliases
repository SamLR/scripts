# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#

# alias junk
alias ls='ls -G'
alias l='ls -lha'
alias ..='cd ../'
alias canIP='curl canhazip.com'
alias genpassword="python -c \"import random; import string; print(''.join([random.choice(string.digits + string.ascii_letters) for i in range(12)]))\""
alias yqp='yq e "." -'
alias ghist='history | grep -iE'

# pretty grep
alias grep="grep --colour=auto"

# Git aliases
alias ga='git add'
alias gs='git status'
alias gc='git commit -v' # add all changes (only already added files)
alias gco='git checkout'
alias gb='git branch'
alias gl='git log --pretty=format:"%h %s" -n 5'
alias gd='git diff'
alias gds='git diff --staged'
alias gt='git tag'
alias ggraph='git log --graph --oneline --decorate --all'
alias gpush='git push'
alias gpushf='git push --force-with-lease'
alias gamend='git commit -v --amend'
alias gfixup='git commit --fixup'
alias gfixlast='git commit --amend --no-edit'
alias grm='git rebase master || git rebase main'
alias girebase='git rebase -i --autosquash'
alias girebasem='git rebase -i --autosquash master || git rebase -i --autosquash main'
alias gpull='git pull'
alias gll='git --no-pager log --oneline -n 5'
alias gcm='git checkout master || git checkout main'
alias gcb='git checkout -b'

# Sublime
alias subln='subl -n'
alias sublh='subl -n .'

# k8s
alias klogs='kubectl logs'
alias kdp='kubectl describe pod'
alias krmp='kubectl delete pod'
alias kg='kubectl get'
alias kgd='kubectl get deployments'
alias kgi='kubectl get ingress'
alias kgj='kubectl get jobs'
alias kgn='kubectl get nodes'
alias kgp='kubectl get pods'
alias kgpa='kubectl get pods -A'
alias kgs='kubectl get svc'
alias kuc='kubectl config use-context'
alias kgetcontexts='kubectl config get-contexts'
alias ksetns='kubectl config set-context --current --namespace'
# Use a global alias for outputting stuff in pretty yaml
alias -g oyq='-o yaml | yq'

# python stuff, want to default to py3
alias python='python3'
alias pip='pip3'

# quick docker conf
alias dubuntu='docker run -ti --rm ubuntu bash'

# Terraform stuff
alias tfplan='terraform plan'
alias tfinit='terraform init'
alias tfapply='terraform apply'
alias tfvalidate='terraform validate'
alias tfworkspace='terraform workspace select'
alias tflsworkspace='terraform workspace list'
alias tf12='tfenv use 0.12.24'
alias tf13='tfenv use 0.13.7'
alias tf14='tfenv use 0.14.11'
alias tf1='tfenv use 1.0.10' 
alias tfclean='rm -f .terraform/{environment,terraform.tfstate}'


function reminder() {
  echo -e "\n\033[31m\033[1m\t\t${@}\033[0m\n"
}

export TZ_I_CARE_ABOUT=(US/Eastern Europe/London Australia/Sydney)
function now(){
    for t in "${TZ_I_CARE_ABOUT[@]}"; do
        echo $(TZ=$t date +%F\ %H:%M\ %Z) -- $t
    done
}

function tztime(){
    for t in "${TZ_I_CARE_ABOUT[@]}"; do
        echo $(TZ=$t gdate --date="TZ=\"Europe/London\" ${1}" +%F\ %H:%M\ %Z) -- $t
    done
}

function b64d(){
  if [ -t 0 ]; then
    msg=$*
  else
    msg=$(cat)
  fi
  echo -n "${msg}" | base64 -D
}

function b64e(){
	if [ -t 0 ]; then
		msg=$*
	else
		msg=$(cat)
	fi
  echo -n "${msg}" | base64
}

alias awswhoami='aws sts get-caller-identity | jq'

function ec2(){
  query="Name=tag:Name,Values=*${1}*"
  aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length ) > 1 or (.Reservations[0].Instances | length ) > 1 then .Reservations[].Instances[] | {"ip":.PrivateIpAddress, "id":.InstanceId, "name": .Tags | map(select(.Key=="Name").Value)[0]} else .Reservations[0].Instances[0].PrivateIpAddress end' -cr
 }
function ec2ip(){
  query="Name=private-ip-address,Values=${1}"
  aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length) > 0 then .Reservations[].Instances[]|{"name": .Tags | map(select(.Key=="Name").Value)[0], "id": .InstanceId, "type":.InstanceType, "image":.ImageId, "state": .State.Name} else "not found" end'
 }

function ec2info(){
  query="Name=tag:Name,Values=*${1}*"
  aws ec2 describe-instances --filter "${query}" |  jq 'if (.Reservations | length) > 0 then .Reservations[].Instances[]|{"name": .Tags | map(select(.Key=="Name").Value)[0], "id": .InstanceId, "type":.InstanceType, "image":.ImageId, "state": .State.Name} else "not found" end'
 }

# Unalias one of the oh-my-zsh defaults so we can use gsts
unalias gsts

function sublp() {
  subl_path="/Users/scoook/code/__sublime"
  name=${1:-$(basename "${PWD}")}

  subl_proj="${subl_path}/${name}.sublime-project"

  if [[ -e "${subl_proj}" ]];
  then
    subl "${subl_proj}"
  else
    echo "Could not find a sublime project named ${name}"
  fi
}


function __ghclone() {
  if [[ "${PWD}" != "/Users/scoook/code" ]]; then
    echo "not in ~/code"
    return
  fi

  org="${1}"
  if [[ -z "${org}" ]]; then
    echo "no org"
    return
  fi

  repo="${2}"
  if [[ -z "${repo}" ]]; then
    echo "no repo"
    return
  fi

  git clone "git@github.com:${org}/${repo}.git"

  cat <<EOM >"/Users/scoook/code/__sublime/${repo}.sublime-project"
{
  "folders":
  [
    {
      "path": "/Users/scoook/code/${repo}"
    }
  ]
}
EOM

  cd "${repo}"
  subl "/Users/scoook/code/__sublime/${repo}.sublime-project"
}

function ghlucidclone() {
  __ghclone lucidhq "${1}"
}

function ghcintclone() {
  __ghclone cint "${1}"
}
